### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CategoriesOnTrend {
  catId: Category
  createdAt: DateTime
  trendId: Trend
}

type Category {
  createdAt: DateTime!
  createdBy: User
  deletedAt: DateTime!
  deletedBy: User
  description: String
  id: ID
  parentId: Int
  status: Status
  subCategory: [Category]
  title: String
  updatedAt: DateTime!
  updatedBy: User
}

input CategoryCreateInput {
  description: String
  parentId: Int
  status: Status
  title: String!
}

type Comment {
  content: String
  createdAt: DateTime!
  createdBy: User
  deletedAt: DateTime!
  deletedBy: User
  id: ID
  trendId: Trend
  updatedAt: DateTime!
  updatedBy: User
}

input CommentCreateInput {
  content: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input ListIdCategory {
  id: Int
}

type Mutation {
  TrendCluster(input_data: [[Float]], max_interation: Int, number_cluster: Int): TrendCluster!
  createCategory(data: CategoryCreateInput!): Category!
  createComment(data: CommentCreateInput!, trendId: Int): Comment!
  createTrend(categoriesId: [String], data: TrendCreateInput!, source: [TrendSourceCreateInput]): Trend!
  createTrendEvalution(data: TrendEvalutionCreateInput!, trendId: Int): TrendEvalution!
  createTrendSource(data: TrendSourceCreateInput!, trendId: Int): TrendSource!
  deleteCategory(id: Int): Category!
  deleteComment(id: Int): Comment!
  deleteTrend(id: Int): Trend!
  deleteTrendEvalution(id: Int): TrendEvalution!
  deleteTrendSource(id: Int): TrendSource!
  login(data: UserAuthPayload!): String
  signupUser(data: UserCreateInput!): User!
  updateCategory(data: CategoryCreateInput!, id: Int): Category!
  updateComment(data: CommentCreateInput!, idEvalution: Int, trendID: Int): Comment!
  updateDataTrend(id: Int, status: String): Trend!
  updateTrend(data: TrendCreateInput!, id: Int, source: [TrendSourceCreateInput]): Trend!
  updateTrendEvalution(data: TrendEvalutionCreateInput!, idEvalution: Int, trendID: Int): TrendEvalution!
  updateTrendSource(data: TrendSourceCreateInput!, id: Int): TrendSource!
}

type Portfolio {
  average_effect: Float
  average_pro: Float
  count: Float
  total: Float
  total_effect: Float
  total_pro: Float
  trendId: Trend
}

type Query {
  allUsers: [User!]!
  getCategories(isparent: Int): [Category!]!
  getCategoriesById(id: Int): Category
  getCommentById(id: Int): Comment
  getCommentByTrendId(trendId: Int): [Comment]
  getComments: [Comment!]!
  getPortfolioEvalution: [Portfolio!]!
  getTrendById(id: Int): Trend
  getTrendEvalution: [TrendEvalution!]!
  getTrendEvalutionById(id: Int): TrendEvalution
  getTrendSource: [TrendSource!]!
  getTrendSourceById(id: Int): TrendSource
  getTrends(data: TrendSearchInput): [Trend]
  getUserById(id: Int): User
}

"""Status when created is Active, and updatedStatus attempts deactive"""
enum Sources {
  Company
  Conferences
  Database
  ExtendNetwork
  Internet
  Media
  Paten
  Publication
  Seminar
  Trade
  Travel
}

"""Status when created is Active, and updatedStatus attempts deactive"""
enum Status {
  ACTIVE
  DEACTIVE
}

type Subscription {
  """See newest Comment with each TrendID"""
  newComment(trendId: Int): Comment
}

type Trend {
  categories: [Category]
  comment: [Comment]
  createdAt: DateTime!
  createdBy: User
  deletedAt: DateTime!
  deletedBy: User
  description: String
  end: DateTime!
  id: ID
  images: [String]
  source: [TrendSource]
  start: DateTime!
  status: Status
  title: String
  trendEvalution: [TrendEvalution]
  updatedAt: DateTime!
  updatedBy: User
  videos: [String]
}

type TrendCluster {
  centroids: [Int]
  indexes: [Int]
  iterations: Int
  k: Int
}

input TrendCreateInput {
  description: String
  end: DateTime
  images: [String]
  start: DateTime
  status: Status
  title: String!
  videos: [String]
}

type TrendEvalution {
  createdAt: DateTime!
  createdBy: User
  deletedAt: DateTime!
  deletedBy: User
  during: String
  effect: Float
  id: ID
  probability: Float
  trendId: Trend
  updatedAt: DateTime!
  updatedBy: User
}

input TrendEvalutionCreateInput {
  during: String
  effect: Float
  probability: Float
}

input TrendSearchInput {
  categoriesId: [String]
  end: DateTime
  orderByField: String
  search_string: String
  start: DateTime
  valueField: String
}

type TrendSource {
  createdAt: DateTime!
  createdBy: User
  deletedAt: DateTime!
  deletedBy: User
  description: String
  id: ID
  source: [Sources!]
  title: String
  trendId: Trend
  updatedAt: DateTime!
  updatedBy: User
  url: String
}

input TrendSourceCreateInput {
  description: String
  source: [Sources!]
  title: String
  url: String
}

type User {
  email: String!
  id: Int!
  name: String
}

input UserAuthPayload {
  email: String
  password: String
}

input UserCreateInput {
  email: String!
  name: String
  password: String
}

type UserLogin {
  token: String!
}
