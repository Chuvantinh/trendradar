{"ast":null,"code":"import { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\n\nfunction defaultDispose() {}\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache(max, dispose) {\n    if (max === void 0) {\n      max = Infinity;\n    }\n\n    if (dispose === void 0) {\n      dispose = defaultDispose;\n    }\n\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n\n  Cache.prototype.has = function (key) {\n    return this.map.has(key);\n  };\n\n  Cache.prototype.get = function (key) {\n    var entry = this.getEntry(key);\n    return entry && entry.value;\n  };\n\n  Cache.prototype.getEntry = function (key) {\n    var entry = this.map.get(key);\n\n    if (entry && entry !== this.newest) {\n      var older = entry.older,\n          newer = entry.newer;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      entry.older = this.newest;\n      entry.older.newer = entry;\n      entry.newer = null;\n      this.newest = entry;\n\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return entry;\n  };\n\n  Cache.prototype.set = function (key, value) {\n    var entry = this.getEntry(key);\n\n    if (entry) {\n      return entry.value = value;\n    }\n\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n    this.map.set(key, entry);\n    return entry.value;\n  };\n\n  Cache.prototype.clean = function () {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  };\n\n  Cache.prototype.delete = function (key) {\n    var entry = this.map.get(key);\n\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n      return true;\n    }\n\n    return false;\n  };\n\n  return Cache;\n}();\n\nvar parentEntrySlot = new Slot();\nvar reusableEmptyArray = [];\nvar emptySetPool = [];\nvar POOL_TARGET_SIZE = 100; // Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\n\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\nfunction valueIs(a, b) {\n  var len = a.length;\n  return (// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n\n    case 1:\n      return value[0];\n\n    case 2:\n      throw value[1];\n  }\n}\n\nfunction valueCopy(value) {\n  return value.slice(0);\n}\n\nvar Entry =\n/** @class */\nfunction () {\n  function Entry(fn, args) {\n    this.fn = fn;\n    this.args = args;\n    this.parents = new Set();\n    this.childValues = new Map(); // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    ++Entry.count;\n  } // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n\n\n  Entry.prototype.recompute = function () {\n    assert(!this.recomputing, \"already recomputing\");\n\n    if (!rememberParent(this) && maybeReportOrphan(this)) {\n      // The recipient of the entry.reportOrphan callback decided to dispose\n      // of this orphan entry by calling entry.dispose(), so we don't need to\n      // (and should not) proceed with the recomputation.\n      return void 0;\n    }\n\n    return mightBeDirty(this) ? reallyRecompute(this) : valueGet(this.value);\n  };\n\n  Entry.prototype.setDirty = function () {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this); // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n\n    maybeUnsubscribe(this);\n  };\n\n  Entry.prototype.dispose = function () {\n    var _this = this;\n\n    forgetChildren(this).forEach(maybeReportOrphan);\n    maybeUnsubscribe(this); // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n\n    this.parents.forEach(function (parent) {\n      parent.setDirty();\n      forgetChild(parent, _this);\n    });\n  };\n\n  Entry.count = 0;\n  return Entry;\n}();\n\nfunction rememberParent(child) {\n  var parent = parentEntrySlot.getValue();\n\n  if (parent) {\n    child.parents.add(parent);\n\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry) {\n  // Since this recomputation is likely to re-remember some of this\n  // entry's children, we forget our children here but do not call\n  // maybeReportOrphan until after the recomputation finishes.\n  var originalChildren = forgetChildren(entry); // Set entry as the parent entry while calling recomputeNewValue(entry).\n\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  } // Now that we've had a chance to re-remember any children that were\n  // involved in the recomputation, we can safely report any orphan\n  // children that remain.\n\n\n  originalChildren.forEach(maybeReportOrphan);\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry) {\n  entry.recomputing = true; // Set entry.value as unknown.\n\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  } // Either way, this line is always reached.\n\n\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child) {\n  child.parents.forEach(function (parent) {\n    return reportDirtyChild(parent, child);\n  });\n}\n\nfunction reportClean(child) {\n  child.parents.forEach(function (parent) {\n    return reportCleanChild(parent, child);\n  });\n} // Let a parent Entry know that one of its children may be dirty.\n\n\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n} // Let a parent Entry know that one of its children is no longer dirty.\n\n\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  var childValue = parent.childValues.get(child);\n\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent, child) {\n  var dc = parent.dirtyChildren;\n\n  if (dc) {\n    dc.delete(child);\n\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n\n      parent.dirtyChildren = null;\n    }\n  }\n} // If the given entry has a reportOrphan method, and no remaining parents,\n// call entry.reportOrphan and return true iff it returns true. The\n// reportOrphan function should return true to indicate entry.dispose()\n// has been called, and the entry has been removed from any other caches\n// (see index.js for the only current example).\n\n\nfunction maybeReportOrphan(entry) {\n  return entry.parents.size === 0 && typeof entry.reportOrphan === \"function\" && entry.reportOrphan() === true;\n} // Removes all children from this entry and returns an array of the\n// removed children.\n\n\nfunction forgetChildren(parent) {\n  var children = reusableEmptyArray;\n\n  if (parent.childValues.size > 0) {\n    children = [];\n    parent.childValues.forEach(function (_value, child) {\n      forgetChild(parent, child);\n      children.push(child);\n    });\n  } // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n\n\n  assert(parent.dirtyChildren === null);\n  return children;\n}\n\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  } // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n\n\n  return true;\n}\n\nfunction maybeUnsubscribe(entry) {\n  var unsubscribe = entry.unsubscribe;\n\n  if (typeof unsubscribe === \"function\") {\n    entry.unsubscribe = void 0;\n    unsubscribe();\n  }\n} // A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\n\n\nvar KeyTrie =\n/** @class */\nfunction () {\n  function KeyTrie(weakness) {\n    this.weakness = weakness;\n  }\n\n  KeyTrie.prototype.lookup = function () {\n    var array = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i] = arguments[_i];\n    }\n\n    return this.lookupArray(array);\n  };\n\n  KeyTrie.prototype.lookupArray = function (array) {\n    var node = this;\n    array.forEach(function (key) {\n      return node = node.getChildTrie(key);\n    });\n    return node.data || (node.data = Object.create(null));\n  };\n\n  KeyTrie.prototype.getChildTrie = function (key) {\n    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    var child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie(this.weakness));\n    return child;\n  };\n\n  return KeyTrie;\n}();\n\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n\n    case \"function\":\n      return true;\n  }\n\n  return false;\n} // The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\n\n\nvar keyTrie = new KeyTrie(typeof WeakMap === \"function\");\n\nfunction defaultMakeCacheKey() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return keyTrie.lookupArray(args);\n}\n\nvar caches = new Set();\n\nfunction wrap(originalFunction, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {\n    return entry.dispose();\n  });\n  var disposable = !!options.disposable;\n  var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic() {\n    if (disposable && !parentEntrySlot.hasValue()) {\n      // If there's no current parent computation, and this wrapped\n      // function is disposable (meaning we don't care about entry.value,\n      // just dependency tracking), then we can short-cut everything else\n      // in this function, because entry.recompute() is going to recycle\n      // the entry object without recomputing anything, anyway.\n      return void 0;\n    }\n\n    var key = makeCacheKey.apply(null, arguments);\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n\n    var args = Array.prototype.slice.call(arguments);\n    var entry = cache.get(key);\n\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n\n      if (disposable) {\n        entry.reportOrphan = function () {\n          return cache.delete(key);\n        };\n      }\n    }\n\n    var value = entry.recompute(); // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n\n    cache.set(key, entry);\n    caches.add(cache); // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(function (cache) {\n        return cache.clean();\n      });\n      caches.clear();\n    } // If options.disposable is truthy, the caller of wrap is telling us\n    // they don't care about the result of entry.recompute(), so we should\n    // avoid returning the value, so it won't be accidentally used.\n\n\n    return disposable ? void 0 : value;\n  }\n\n  optimistic.dirty = function () {\n    var key = makeCacheKey.apply(null, arguments);\n    var child = key !== void 0 && cache.get(key);\n\n    if (child) {\n      child.setDirty();\n    }\n  };\n\n  return optimistic;\n}\n\nexport { KeyTrie, defaultMakeCacheKey, wrap }; //# sourceMappingURL=bundle.esm.js.map","map":{"version":3,"sources":["/Users/vantinhchu/Documents/07_Projects/IntelliJ/trendradar/angular/node_modules/apollo-cache-inmemory/node_modules/optimism/lib/bundle.esm.js"],"names":["Slot","asyncFromGen","bind","bindContext","noContext","setTimeout","defaultDispose","Cache","max","dispose","Infinity","map","Map","newest","oldest","prototype","has","key","get","entry","getEntry","value","older","newer","set","clean","size","delete","parentEntrySlot","reusableEmptyArray","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","Entry","fn","args","parents","Set","childValues","dirtyChildren","dirty","recomputing","count","recompute","rememberParent","maybeReportOrphan","mightBeDirty","reallyRecompute","setDirty","reportDirty","maybeUnsubscribe","_this","forgetChildren","forEach","parent","forgetChild","child","getValue","add","reportDirtyChild","reportCleanChild","originalChildren","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","reportClean","pop","childValue","removeDirtyChild","dc","push","reportOrphan","children","_value","subscribe","unsubscribe","KeyTrie","weakness","lookup","array","_i","arguments","lookupArray","node","getChildTrie","data","Object","create","isObjRef","weak","WeakMap","strong","keyTrie","defaultMakeCacheKey","caches","wrap","originalFunction","options","cache","Math","pow","disposable","makeCacheKey","optimistic","hasValue","Array","call","clear"],"mappings":"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","sourcesContent":["import { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\n\nfunction defaultDispose() { }\r\nvar Cache = /** @class */ (function () {\r\n    function Cache(max, dispose) {\r\n        if (max === void 0) { max = Infinity; }\r\n        if (dispose === void 0) { dispose = defaultDispose; }\r\n        this.max = max;\r\n        this.dispose = dispose;\r\n        this.map = new Map();\r\n        this.newest = null;\r\n        this.oldest = null;\r\n    }\r\n    Cache.prototype.has = function (key) {\r\n        return this.map.has(key);\r\n    };\r\n    Cache.prototype.get = function (key) {\r\n        var entry = this.getEntry(key);\r\n        return entry && entry.value;\r\n    };\r\n    Cache.prototype.getEntry = function (key) {\r\n        var entry = this.map.get(key);\r\n        if (entry && entry !== this.newest) {\r\n            var older = entry.older, newer = entry.newer;\r\n            if (newer) {\r\n                newer.older = older;\r\n            }\r\n            if (older) {\r\n                older.newer = newer;\r\n            }\r\n            entry.older = this.newest;\r\n            entry.older.newer = entry;\r\n            entry.newer = null;\r\n            this.newest = entry;\r\n            if (entry === this.oldest) {\r\n                this.oldest = newer;\r\n            }\r\n        }\r\n        return entry;\r\n    };\r\n    Cache.prototype.set = function (key, value) {\r\n        var entry = this.getEntry(key);\r\n        if (entry) {\r\n            return entry.value = value;\r\n        }\r\n        entry = {\r\n            key: key,\r\n            value: value,\r\n            newer: null,\r\n            older: this.newest\r\n        };\r\n        if (this.newest) {\r\n            this.newest.newer = entry;\r\n        }\r\n        this.newest = entry;\r\n        this.oldest = this.oldest || entry;\r\n        this.map.set(key, entry);\r\n        return entry.value;\r\n    };\r\n    Cache.prototype.clean = function () {\r\n        while (this.oldest && this.map.size > this.max) {\r\n            this.delete(this.oldest.key);\r\n        }\r\n    };\r\n    Cache.prototype.delete = function (key) {\r\n        var entry = this.map.get(key);\r\n        if (entry) {\r\n            if (entry === this.newest) {\r\n                this.newest = entry.older;\r\n            }\r\n            if (entry === this.oldest) {\r\n                this.oldest = entry.newer;\r\n            }\r\n            if (entry.newer) {\r\n                entry.newer.older = entry.older;\r\n            }\r\n            if (entry.older) {\r\n                entry.older.newer = entry.newer;\r\n            }\r\n            this.map.delete(key);\r\n            this.dispose(entry.value, key);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return Cache;\r\n}());\n\nvar parentEntrySlot = new Slot();\n\nvar reusableEmptyArray = [];\r\nvar emptySetPool = [];\r\nvar POOL_TARGET_SIZE = 100;\r\n// Since this package might be used browsers, we should avoid using the\r\n// Node built-in assert module.\r\nfunction assert(condition, optionalMessage) {\r\n    if (!condition) {\r\n        throw new Error(optionalMessage || \"assertion failure\");\r\n    }\r\n}\r\nfunction valueIs(a, b) {\r\n    var len = a.length;\r\n    return (\r\n    // Unknown values are not equal to each other.\r\n    len > 0 &&\r\n        // Both values must be ordinary (or both exceptional) to be equal.\r\n        len === b.length &&\r\n        // The underlying value or exception must be the same.\r\n        a[len - 1] === b[len - 1]);\r\n}\r\nfunction valueGet(value) {\r\n    switch (value.length) {\r\n        case 0: throw new Error(\"unknown value\");\r\n        case 1: return value[0];\r\n        case 2: throw value[1];\r\n    }\r\n}\r\nfunction valueCopy(value) {\r\n    return value.slice(0);\r\n}\r\nvar Entry = /** @class */ (function () {\r\n    function Entry(fn, args) {\r\n        this.fn = fn;\r\n        this.args = args;\r\n        this.parents = new Set();\r\n        this.childValues = new Map();\r\n        // When this Entry has children that are dirty, this property becomes\r\n        // a Set containing other Entry objects, borrowed from emptySetPool.\r\n        // When the set becomes empty, it gets recycled back to emptySetPool.\r\n        this.dirtyChildren = null;\r\n        this.dirty = true;\r\n        this.recomputing = false;\r\n        this.value = [];\r\n        ++Entry.count;\r\n    }\r\n    // This is the most important method of the Entry API, because it\r\n    // determines whether the cached this.value can be returned immediately,\r\n    // or must be recomputed. The overall performance of the caching system\r\n    // depends on the truth of the following observations: (1) this.dirty is\r\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\r\n    // (3) valueGet(this.value) is usually returned without recomputation.\r\n    Entry.prototype.recompute = function () {\r\n        assert(!this.recomputing, \"already recomputing\");\r\n        if (!rememberParent(this) && maybeReportOrphan(this)) {\r\n            // The recipient of the entry.reportOrphan callback decided to dispose\r\n            // of this orphan entry by calling entry.dispose(), so we don't need to\r\n            // (and should not) proceed with the recomputation.\r\n            return void 0;\r\n        }\r\n        return mightBeDirty(this)\r\n            ? reallyRecompute(this)\r\n            : valueGet(this.value);\r\n    };\r\n    Entry.prototype.setDirty = function () {\r\n        if (this.dirty)\r\n            return;\r\n        this.dirty = true;\r\n        this.value.length = 0;\r\n        reportDirty(this);\r\n        // We can go ahead and unsubscribe here, since any further dirty\r\n        // notifications we receive will be redundant, and unsubscribing may\r\n        // free up some resources, e.g. file watchers.\r\n        maybeUnsubscribe(this);\r\n    };\r\n    Entry.prototype.dispose = function () {\r\n        var _this = this;\r\n        forgetChildren(this).forEach(maybeReportOrphan);\r\n        maybeUnsubscribe(this);\r\n        // Because this entry has been kicked out of the cache (in index.js),\r\n        // we've lost the ability to find out if/when this entry becomes dirty,\r\n        // whether that happens through a subscription, because of a direct call\r\n        // to entry.setDirty(), or because one of its children becomes dirty.\r\n        // Because of this loss of future information, we have to assume the\r\n        // worst (that this entry might have become dirty very soon), so we must\r\n        // immediately mark this entry's parents as dirty. Normally we could\r\n        // just call entry.setDirty() rather than calling parent.setDirty() for\r\n        // each parent, but that would leave this entry in parent.childValues\r\n        // and parent.dirtyChildren, which would prevent the child from being\r\n        // truly forgotten.\r\n        this.parents.forEach(function (parent) {\r\n            parent.setDirty();\r\n            forgetChild(parent, _this);\r\n        });\r\n    };\r\n    Entry.count = 0;\r\n    return Entry;\r\n}());\r\nfunction rememberParent(child) {\r\n    var parent = parentEntrySlot.getValue();\r\n    if (parent) {\r\n        child.parents.add(parent);\r\n        if (!parent.childValues.has(child)) {\r\n            parent.childValues.set(child, []);\r\n        }\r\n        if (mightBeDirty(child)) {\r\n            reportDirtyChild(parent, child);\r\n        }\r\n        else {\r\n            reportCleanChild(parent, child);\r\n        }\r\n        return parent;\r\n    }\r\n}\r\nfunction reallyRecompute(entry) {\r\n    // Since this recomputation is likely to re-remember some of this\r\n    // entry's children, we forget our children here but do not call\r\n    // maybeReportOrphan until after the recomputation finishes.\r\n    var originalChildren = forgetChildren(entry);\r\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\r\n    parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\r\n    if (maybeSubscribe(entry)) {\r\n        // If we successfully recomputed entry.value and did not fail to\r\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\r\n        setClean(entry);\r\n    }\r\n    // Now that we've had a chance to re-remember any children that were\r\n    // involved in the recomputation, we can safely report any orphan\r\n    // children that remain.\r\n    originalChildren.forEach(maybeReportOrphan);\r\n    return valueGet(entry.value);\r\n}\r\nfunction recomputeNewValue(entry) {\r\n    entry.recomputing = true;\r\n    // Set entry.value as unknown.\r\n    entry.value.length = 0;\r\n    try {\r\n        // If entry.fn succeeds, entry.value will become a normal Value.\r\n        entry.value[0] = entry.fn.apply(null, entry.args);\r\n    }\r\n    catch (e) {\r\n        // If entry.fn throws, entry.value will become exceptional.\r\n        entry.value[1] = e;\r\n    }\r\n    // Either way, this line is always reached.\r\n    entry.recomputing = false;\r\n}\r\nfunction mightBeDirty(entry) {\r\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\r\n}\r\nfunction setClean(entry) {\r\n    entry.dirty = false;\r\n    if (mightBeDirty(entry)) {\r\n        // This Entry may still have dirty children, in which case we can't\r\n        // let our parents know we're clean just yet.\r\n        return;\r\n    }\r\n    reportClean(entry);\r\n}\r\nfunction reportDirty(child) {\r\n    child.parents.forEach(function (parent) { return reportDirtyChild(parent, child); });\r\n}\r\nfunction reportClean(child) {\r\n    child.parents.forEach(function (parent) { return reportCleanChild(parent, child); });\r\n}\r\n// Let a parent Entry know that one of its children may be dirty.\r\nfunction reportDirtyChild(parent, child) {\r\n    // Must have called rememberParent(child) before calling\r\n    // reportDirtyChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(mightBeDirty(child));\r\n    if (!parent.dirtyChildren) {\r\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\r\n    }\r\n    else if (parent.dirtyChildren.has(child)) {\r\n        // If we already know this child is dirty, then we must have already\r\n        // informed our own parents that we are dirty, so we can terminate\r\n        // the recursion early.\r\n        return;\r\n    }\r\n    parent.dirtyChildren.add(child);\r\n    reportDirty(parent);\r\n}\r\n// Let a parent Entry know that one of its children is no longer dirty.\r\nfunction reportCleanChild(parent, child) {\r\n    // Must have called rememberChild(child) before calling\r\n    // reportCleanChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(!mightBeDirty(child));\r\n    var childValue = parent.childValues.get(child);\r\n    if (childValue.length === 0) {\r\n        parent.childValues.set(child, valueCopy(child.value));\r\n    }\r\n    else if (!valueIs(childValue, child.value)) {\r\n        parent.setDirty();\r\n    }\r\n    removeDirtyChild(parent, child);\r\n    if (mightBeDirty(parent)) {\r\n        return;\r\n    }\r\n    reportClean(parent);\r\n}\r\nfunction removeDirtyChild(parent, child) {\r\n    var dc = parent.dirtyChildren;\r\n    if (dc) {\r\n        dc.delete(child);\r\n        if (dc.size === 0) {\r\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\r\n                emptySetPool.push(dc);\r\n            }\r\n            parent.dirtyChildren = null;\r\n        }\r\n    }\r\n}\r\n// If the given entry has a reportOrphan method, and no remaining parents,\r\n// call entry.reportOrphan and return true iff it returns true. The\r\n// reportOrphan function should return true to indicate entry.dispose()\r\n// has been called, and the entry has been removed from any other caches\r\n// (see index.js for the only current example).\r\nfunction maybeReportOrphan(entry) {\r\n    return entry.parents.size === 0 &&\r\n        typeof entry.reportOrphan === \"function\" &&\r\n        entry.reportOrphan() === true;\r\n}\r\n// Removes all children from this entry and returns an array of the\r\n// removed children.\r\nfunction forgetChildren(parent) {\r\n    var children = reusableEmptyArray;\r\n    if (parent.childValues.size > 0) {\r\n        children = [];\r\n        parent.childValues.forEach(function (_value, child) {\r\n            forgetChild(parent, child);\r\n            children.push(child);\r\n        });\r\n    }\r\n    // After we forget all our children, this.dirtyChildren must be empty\r\n    // and therefore must have been reset to null.\r\n    assert(parent.dirtyChildren === null);\r\n    return children;\r\n}\r\nfunction forgetChild(parent, child) {\r\n    child.parents.delete(parent);\r\n    parent.childValues.delete(child);\r\n    removeDirtyChild(parent, child);\r\n}\r\nfunction maybeSubscribe(entry) {\r\n    if (typeof entry.subscribe === \"function\") {\r\n        try {\r\n            maybeUnsubscribe(entry); // Prevent double subscriptions.\r\n            entry.unsubscribe = entry.subscribe.apply(null, entry.args);\r\n        }\r\n        catch (e) {\r\n            // If this Entry has a subscribe function and it threw an exception\r\n            // (or an unsubscribe function it previously returned now throws),\r\n            // return false to indicate that we were not able to subscribe (or\r\n            // unsubscribe), and this Entry should remain dirty.\r\n            entry.setDirty();\r\n            return false;\r\n        }\r\n    }\r\n    // Returning true indicates either that there was no entry.subscribe\r\n    // function or that it succeeded.\r\n    return true;\r\n}\r\nfunction maybeUnsubscribe(entry) {\r\n    var unsubscribe = entry.unsubscribe;\r\n    if (typeof unsubscribe === \"function\") {\r\n        entry.unsubscribe = void 0;\r\n        unsubscribe();\r\n    }\r\n}\n\n// A trie data structure that holds object keys weakly, yet can also hold\r\n// non-object keys, unlike the native `WeakMap`.\r\nvar KeyTrie = /** @class */ (function () {\r\n    function KeyTrie(weakness) {\r\n        this.weakness = weakness;\r\n    }\r\n    KeyTrie.prototype.lookup = function () {\r\n        var array = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            array[_i] = arguments[_i];\r\n        }\r\n        return this.lookupArray(array);\r\n    };\r\n    KeyTrie.prototype.lookupArray = function (array) {\r\n        var node = this;\r\n        array.forEach(function (key) { return node = node.getChildTrie(key); });\r\n        return node.data || (node.data = Object.create(null));\r\n    };\r\n    KeyTrie.prototype.getChildTrie = function (key) {\r\n        var map = this.weakness && isObjRef(key)\r\n            ? this.weak || (this.weak = new WeakMap())\r\n            : this.strong || (this.strong = new Map());\r\n        var child = map.get(key);\r\n        if (!child)\r\n            map.set(key, child = new KeyTrie(this.weakness));\r\n        return child;\r\n    };\r\n    return KeyTrie;\r\n}());\r\nfunction isObjRef(value) {\r\n    switch (typeof value) {\r\n        case \"object\":\r\n            if (value === null)\r\n                break;\r\n        // Fall through to return true...\r\n        case \"function\":\r\n            return true;\r\n    }\r\n    return false;\r\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\r\n// a unique object for any shallow-identical list of arguments. If you need\r\n// to implement a custom makeCacheKey function, you may find it helpful to\r\n// delegate the final work to defaultMakeCacheKey, which is why we export it\r\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\r\n// does not support WeakMap, or you have the ability to return a string key.\r\n// In those cases, just write your own custom makeCacheKey functions.\r\nvar keyTrie = new KeyTrie(typeof WeakMap === \"function\");\r\nfunction defaultMakeCacheKey() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return keyTrie.lookupArray(args);\r\n}\r\nvar caches = new Set();\r\nfunction wrap(originalFunction, options) {\r\n    if (options === void 0) { options = Object.create(null); }\r\n    var cache = new Cache(options.max || Math.pow(2, 16), function (entry) { return entry.dispose(); });\r\n    var disposable = !!options.disposable;\r\n    var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\r\n    function optimistic() {\r\n        if (disposable && !parentEntrySlot.hasValue()) {\r\n            // If there's no current parent computation, and this wrapped\r\n            // function is disposable (meaning we don't care about entry.value,\r\n            // just dependency tracking), then we can short-cut everything else\r\n            // in this function, because entry.recompute() is going to recycle\r\n            // the entry object without recomputing anything, anyway.\r\n            return void 0;\r\n        }\r\n        var key = makeCacheKey.apply(null, arguments);\r\n        if (key === void 0) {\r\n            return originalFunction.apply(null, arguments);\r\n        }\r\n        var args = Array.prototype.slice.call(arguments);\r\n        var entry = cache.get(key);\r\n        if (entry) {\r\n            entry.args = args;\r\n        }\r\n        else {\r\n            entry = new Entry(originalFunction, args);\r\n            cache.set(key, entry);\r\n            entry.subscribe = options.subscribe;\r\n            if (disposable) {\r\n                entry.reportOrphan = function () { return cache.delete(key); };\r\n            }\r\n        }\r\n        var value = entry.recompute();\r\n        // Move this entry to the front of the least-recently used queue,\r\n        // since we just finished computing its value.\r\n        cache.set(key, entry);\r\n        caches.add(cache);\r\n        // Clean up any excess entries in the cache, but only if there is no\r\n        // active parent entry, meaning we're not in the middle of a larger\r\n        // computation that might be flummoxed by the cleaning.\r\n        if (!parentEntrySlot.hasValue()) {\r\n            caches.forEach(function (cache) { return cache.clean(); });\r\n            caches.clear();\r\n        }\r\n        // If options.disposable is truthy, the caller of wrap is telling us\r\n        // they don't care about the result of entry.recompute(), so we should\r\n        // avoid returning the value, so it won't be accidentally used.\r\n        return disposable ? void 0 : value;\r\n    }\r\n    optimistic.dirty = function () {\r\n        var key = makeCacheKey.apply(null, arguments);\r\n        var child = key !== void 0 && cache.get(key);\r\n        if (child) {\r\n            child.setDirty();\r\n        }\r\n    };\r\n    return optimistic;\r\n}\n\nexport { KeyTrie, defaultMakeCacheKey, wrap };\n//# sourceMappingURL=bundle.esm.js.map\n"]},"metadata":{},"sourceType":"module"}