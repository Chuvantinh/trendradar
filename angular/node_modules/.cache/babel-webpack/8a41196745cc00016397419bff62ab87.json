{"ast":null,"code":"import _asyncToGenerator from \"/Users/vantinhchu/Documents/07_Projects/IntelliJ/trendradar/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __asyncValues } from \"tslib\";\nimport { FormControl, Validators } from '@angular/forms'; // Get data by gql query\n\nimport { gql } from 'apollo-angular';\nimport { Observable, Subscription } from 'rxjs';\nimport { finalize } from \"rxjs/operators\";\nexport class TrendAddOneComponent {\n  constructor(formBuilder, apollo, router, route, notification, fb, db, // public downloadURL: Observable<string>,\n  storage) {\n    this.formBuilder = formBuilder;\n    this.apollo = apollo;\n    this.router = router;\n    this.route = route;\n    this.notification = notification;\n    this.fb = fb;\n    this.db = db;\n    this.storage = storage;\n    this.pokemonControl = new FormControl();\n    this.pokemonGroups = [{\n      name: 'Grass',\n      pokemon: [{\n        value: 'bulbasaur-0',\n        viewValue: 'Bulbasaur'\n      }, {\n        value: 'oddish-1',\n        viewValue: 'Oddish'\n      }, {\n        value: 'bellsprout-2',\n        viewValue: 'Bellsprout'\n      }]\n    }, {\n      name: 'Water',\n      pokemon: [{\n        value: 'squirtle-3',\n        viewValue: 'Squirtle'\n      }, {\n        value: 'psyduck-4',\n        viewValue: 'Psyduck'\n      }, {\n        value: 'horsea-5',\n        viewValue: 'Horsea'\n      }]\n    }, {\n      name: 'Fire',\n      disabled: true,\n      pokemon: [{\n        value: 'charmander-6',\n        viewValue: 'Charmander'\n      }, {\n        value: 'vulpix-7',\n        viewValue: 'Vulpix'\n      }, {\n        value: 'flareon-8',\n        viewValue: 'Flareon'\n      }]\n    }, {\n      name: 'Psychic',\n      pokemon: [{\n        value: 'mew-9',\n        viewValue: 'Mew'\n      }, {\n        value: 'mewtwo-10',\n        viewValue: 'Mewtwo'\n      }]\n    }];\n    this.form = this.formBuilder.group({});\n    this.categories = [];\n    this.categoriesMegatrend = [];\n    this.images = []; // for preview images\n\n    this.videos = []; // for preview videos\n\n    this.uploadFilesImages = []; // for save images\n\n    this.uploadFilesVideos = []; // for save videos\n    // link images and videos after uploading\n\n    this.linkImages = [];\n    this.linkVideos = [];\n    this.downloadURL = new Observable();\n    this.querySubscription = new Subscription();\n  }\n\n  ngOnInit() {\n    //this.getCategories();\n    this.getCategoriesMegatrend();\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      description: ['', Validators.required],\n      trendVideos: this.fb.array([this.fb.group({\n        trend_videos: new FormControl('', [Validators.required])\n      })]),\n      trendImages: this.fb.array([this.fb.group({\n        trend_images: new FormControl('', [Validators.required])\n      })]),\n      catId1: ['', Validators.required],\n      catId2: ['', Validators.required],\n      sources: this.fb.array([this.fb.group({\n        title: new FormControl('', [Validators.required]),\n        description: new FormControl('', [Validators.required]),\n        url: new FormControl('', [Validators.required]),\n        source: new FormControl('', [Validators.required])\n      })])\n    });\n  }\n\n  ngOnDestroy() {\n    this.querySubscription.unsubscribe();\n  }\n\n  add(valueInput) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var e_1, _a, e_2, _b; // validate form\n\n\n      if (_this.form.invalid) {\n        _this.notification.showError('Bitte validieren Sie Form', 'trendradar.de');\n\n        return;\n      }\n\n      if (_this.uploadFilesImages.length > 0) {\n        try {\n          for (var _c = __asyncValues(_this.uploadFilesImages), _d; _d = yield _c.next(), !_d.done;) {\n            let item = _d.value;\n\n            _this.linkImages.push(yield _this.uploadImages(item));\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) yield _a.call(_c);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n\n      if (_this.uploadFilesVideos.length > 0) {\n        try {\n          for (var _e = __asyncValues(_this.uploadFilesVideos), _f; _f = yield _e.next(), !_f.done;) {\n            let item = _f.value;\n\n            _this.linkVideos.push(yield _this.uploadVideos(item));\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) yield _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      } // console.log(this.linkVideos)\n      // console.log(this.linkImages)\n      //console.log('valueInput' + valueInput.description)\n\n\n      let STATUS;\n\n      (function (STATUS) {\n        STATUS[\"e\"] = \"ACTIVE\";\n        STATUS[\"g\"] = \"DEACTIVE\";\n        STATUS[\"b\"] = \"BEENDET\";\n      })(STATUS || (STATUS = {})); // add data to database\n\n\n      const createTrend = gql`\n      mutation createTrend(\n        $title: String!,\n        $description: String,\n        $status: Status\n        $images: [String],\n        $videos: [String],\n        $catId1: Int,\n        $catId2: Int,\n        $source: [TrendSourceCreateInput]\n      ){\n        createTrend(data: {\n          title: $title,\n          description: $description,\n          status: $status,\n          images: $images,\n          videos: $videos,\n        }, \n          catId1: $catId1,\n          catId2: $catId2,\n          source: $source\n        )\n        {\n          id\n          title\n          description\n          createdAt\n          createdBy{\n            id\n            name\n          }\n          createdBy{\n            id\n            name\n            email\n          }\n        }\n      }\n    `;\n\n      _this.apollo.mutate({\n        mutation: createTrend,\n        variables: {\n          title: valueInput.title,\n          description: valueInput.description,\n          status: STATUS.e,\n          images: _this.linkImages,\n          videos: _this.linkVideos,\n          catId1: parseInt(valueInput.catId1),\n          catId2: parseInt(valueInput.catId2),\n          source: valueInput.sources\n        }\n      }).subscribe(data => {\n        if (data) {\n          _this.notification.showSuccess('trendradar', 'trendradar.de');\n\n          _this.router.navigateByUrl('listtrends');\n        } else {\n          _this.notification.showError('error during adding', 'trendradar.de');\n        }\n      });\n    })();\n  }\n  /**\n   * Handle Change of Images\n   */\n\n\n  onFileImagesChange(event) {\n    if (event.target.files && event.target.files[0]) {\n      //console.log(this.uploadFilesImages);\n      let filesAmount = event.target.files.length;\n\n      for (let i = 0; i < filesAmount; i++) {\n        let reader = new FileReader();\n\n        reader.onload = event => {\n          // console.log(event.target.result);\n          this.images.push(event.target.result);\n        }; // for upload image\n\n\n        this.uploadFilesImages.push(event.target.files[i]);\n        reader.readAsDataURL(event.target.files[i]);\n      }\n    }\n  }\n  /**\n   * Handle Change of Videos\n   */\n\n\n  onFileVideoChange(event) {\n    if (event.target.files && event.target.files[0]) {\n      let filesAmount = event.target.files.length;\n\n      for (let i = 0; i < filesAmount; i++) {\n        let reader = new FileReader();\n\n        reader.onload = event => {\n          // console.log(event.target.result);\n          this.videos.push(event.target.result);\n        }; // for upload video to frise base\n\n\n        this.uploadFilesVideos.push(event.target.files[i]);\n        reader.readAsDataURL(event.target.files[i]);\n      }\n    }\n  }\n  /**\n   * get Infor of all categories\n   */\n\n\n  getCategories() {\n    this.apollo.watchQuery({\n      query: gql`\n        query getCategories($isparent: Int){\n          getCategories(isparent: $isparent){\n            id\n            title\n            description\n            createdAt\n            createdBy\n            {\n              id\n              name\n            }\n          }\n        }\n      `,\n      variables: {\n        isparent: 1\n      }\n    }).valueChanges.subscribe(result => {\n      this.categories = Array.of(result.data);\n      this.categories = this.categories[0].getCategories;\n    });\n  }\n  /**\n   * get Infor of all categories\n   */\n\n\n  getCategoriesMegatrend() {\n    this.apollo.watchQuery({\n      query: gql`\n        query getCategories($isparent: Int){\n          getCategories(isparent: $isparent){\n            id\n            title\n            description\n            createdAt\n            createdBy\n            {\n              id\n              name\n            }\n          }\n        }\n      `,\n      variables: {\n        isparent: 0\n      }\n    }).valueChanges.subscribe(result => {\n      this.categoriesMegatrend = Array.of(result.data);\n      this.categoriesMegatrend = this.categoriesMegatrend[0].getCategories;\n    });\n  }\n\n  getMarcoTrendByMegaId($event) {\n    let id = parseInt($event);\n    this.apollo.watchQuery({\n      query: gql`\n        query getSubcategory($id: Int){\n          getSubcategory(id: $id){\n            id\n            title\n            description\n          }\n        }\n      `,\n      variables: {\n        parentId: id\n      }\n    }).valueChanges.subscribe(result2 => {\n      console.log('when changing category');\n      console.log(Array.of(result2.data)); //this.categories = Array.of(this.categories[0].getSubcategory);\n    });\n  }\n  /**\n   * ******************************************************************************************************** FORM ARRAY\n   */\n\n  /**\n   * Video, Add and Remove question type Video\n   */\n\n\n  trend_videos() {\n    return this.form.get('trendVideos');\n  }\n\n  removeQuestionVideo(index) {\n    this.trend_videos().removeAt(index);\n  }\n  /**\n   * Image, Add and Remove question type image\n   * image would save on the google cloud\n   */\n\n\n  trend_images() {\n    return this.form.get('trendImages');\n  }\n\n  removeQuestionImage(index) {\n    this.trend_images().removeAt(index);\n  }\n\n  getSources() {\n    return this.form.get('sources');\n  }\n\n  addSources() {\n    return this.getSources().push(this.fb.group({\n      title: new FormControl('', [Validators.required]),\n      description: new FormControl('', [Validators.required]),\n      url: new FormControl('', [Validators.required]),\n      source: new FormControl('', [Validators.required])\n    }));\n  }\n\n  removeSources(index) {\n    this.getSources().removeAt(index);\n  }\n  /**\n   * *********************************************************************************************************** END FORM ARRAY\n   */\n\n  /**\n   * Upload Image to Firebase Cloud in Folder ImagesSurvey\n   * @output string url\n   */\n\n\n  uploadImages(fileItem) {\n    return new Promise((resolve, reject) => {\n      let URL;\n      const date = Date.now();\n      const filePath = `Masterthesis/${date}`; // where storaged\n\n      const fileRef = this.storage.ref(filePath); // where is the endpoint\n\n      const task = this.storage.upload(`Masterthesis/${date}`, fileItem);\n      task.snapshotChanges().pipe(finalize(() => {\n        this.downloadURL = fileRef.getDownloadURL();\n        this.downloadURL.subscribe(url => {\n          if (url) {\n            URL = url;\n            resolve(URL);\n          }\n\n          console.log('Link image in function uploadImages  is :' + URL);\n        });\n      })).subscribe();\n    });\n  }\n  /**\n   * Upload Video to Firebase Cloud in Folder VideosSurvey\n   * @output string url\n   */\n\n\n  uploadVideos(fileItem) {\n    return new Promise((resolve, reject) => {\n      let URL;\n      const date = Date.now();\n      const filePath = `Masterthesis/${date}`; // where storaged\n\n      const fileRef = this.storage.ref(filePath); // where is the endpoint\n\n      const task = this.storage.upload(`Masterthesis/${date}`, fileItem);\n      task.snapshotChanges().pipe(finalize(() => {\n        this.downloadURL = fileRef.getDownloadURL();\n        this.downloadURL.subscribe(url => {\n          if (url) {\n            URL = url;\n            resolve(URL);\n          }\n\n          console.log('Link video in function uploadImages  is :' + URL);\n        });\n      })).subscribe();\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/vantinhchu/Documents/07_Projects/IntelliJ/trendradar/angular/src/app/pages/trend-add-one/trend-add-one.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormGroup, FormControl, FormArray, FormBuilder, Validators} from '@angular/forms';\n// Get data by gql query\nimport {Apollo, gql} from 'apollo-angular';\n// import  from 'graphql-tag';\n\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {NotificationService} from '../../services/notification.service';\n\nimport {AngularFireDatabase} from \"@angular/fire/database\";\nimport {AngularFireStorage} from \"@angular/fire/storage\";\nimport { HttpClientModule } from '@angular/common/http';\nimport {Observable,of, from, Subscription } from 'rxjs';\nimport {finalize, map} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-trend-add-one',\n  templateUrl: './trend-add-one.component.html',\n  styleUrls: ['./trend-add-one.component.sass'],\n})\n\n\ninterface Pokemon {\n  value: string;\n  viewValue: string;\n}\n\ninterface PokemonGroup {\n  disabled?: boolean;\n  name: string;\n  pokemon: Pokemon[];\n}\n\n\nexport class TrendAddOneComponent implements OnInit {\n  pokemonControl = new FormControl();\n  pokemonGroups: PokemonGroup[] = [\n    {\n      name: 'Grass',\n      pokemon: [\n        {value: 'bulbasaur-0', viewValue: 'Bulbasaur'},\n        {value: 'oddish-1', viewValue: 'Oddish'},\n        {value: 'bellsprout-2', viewValue: 'Bellsprout'}\n      ]\n    },\n    {\n      name: 'Water',\n      pokemon: [\n        {value: 'squirtle-3', viewValue: 'Squirtle'},\n        {value: 'psyduck-4', viewValue: 'Psyduck'},\n        {value: 'horsea-5', viewValue: 'Horsea'}\n      ]\n    },\n    {\n      name: 'Fire',\n      disabled: true,\n      pokemon: [\n        {value: 'charmander-6', viewValue: 'Charmander'},\n        {value: 'vulpix-7', viewValue: 'Vulpix'},\n        {value: 'flareon-8', viewValue: 'Flareon'}\n      ]\n    },\n    {\n      name: 'Psychic',\n      pokemon: [\n        {value: 'mew-9', viewValue: 'Mew'},\n        {value: 'mewtwo-10', viewValue: 'Mewtwo'},\n      ]\n    }\n  ];\n\n\n  form: FormGroup = this.formBuilder.group({});\n  categories:any = [];\n  categoriesMegatrend:any = [];\n\n  images:any[] = []; // for preview images\n  videos:any[] = []; // for preview videos\n  uploadFilesImages:any[] = []; // for save images\n  uploadFilesVideos:any[] = []; // for save videos\n  // link images and videos after uploading\n  linkImages:any[] = [];\n  linkVideos:any[] = [];\n  downloadURL: Observable<string> = new Observable<string>();\n\n  private querySubscription: Subscription = new Subscription();\n\n\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private apollo: Apollo,\n\n    private router: Router,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private fb: FormBuilder,\n\n    private db: AngularFireDatabase,\n    // public downloadURL: Observable<string>,\n    private storage: AngularFireStorage,\n  ) { }\n\n  ngOnInit(): void {\n    //this.getCategories();\n    this.getCategoriesMegatrend();\n\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      description: ['', Validators.required],\n      trendVideos: this.fb.array([\n        this.fb.group({\n          trend_videos: new FormControl('', [Validators.required]),\n        })\n      ]),\n      trendImages: this.fb.array([\n        this.fb.group({\n          trend_images: new FormControl('', [Validators.required]),\n        })\n      ]),\n      catId1: ['', Validators.required],\n      catId2: ['', Validators.required],\n      sources: this.fb.array([\n        this.fb.group({\n          title: new FormControl('', [Validators.required]),\n          description: new FormControl('', [Validators.required]),\n          url: new FormControl('', [Validators.required]),\n          source: new FormControl('', [Validators.required]),\n        })\n      ]),\n\n    });\n  }\n\n  ngOnDestroy() {\n    this.querySubscription.unsubscribe();\n  }\n\n  async add(valueInput: any) {\n    // validate form\n    if (this.form.invalid) {\n      this.notification.showError('Bitte validieren Sie Form', 'trendradar.de');\n      return;\n    }\n\n    if ( this.uploadFilesImages.length > 0){\n      for await (let item of this.uploadFilesImages){\n        this.linkImages.push( await this.uploadImages(item));\n      }\n    }\n\n    if ( this.uploadFilesVideos.length > 0){\n      for await (let item of this.uploadFilesVideos){\n        this.linkVideos.push( await this.uploadVideos(item));\n      }\n    }\n    // console.log(this.linkVideos)\n    // console.log(this.linkImages)\n\n    //console.log('valueInput' + valueInput.description)\n\n    enum STATUS {\n      e = 'ACTIVE',\n      g = 'DEACTIVE',\n      b = 'BEENDET'\n    }\n\n    // add data to database\n    const createTrend = gql`\n      mutation createTrend(\n        $title: String!,\n        $description: String,\n        $status: Status\n        $images: [String],\n        $videos: [String],\n        $catId1: Int,\n        $catId2: Int,\n        $source: [TrendSourceCreateInput]\n      ){\n        createTrend(data: {\n          title: $title,\n          description: $description,\n          status: $status,\n          images: $images,\n          videos: $videos,\n        }, \n          catId1: $catId1,\n          catId2: $catId2,\n          source: $source\n        )\n        {\n          id\n          title\n          description\n          createdAt\n          createdBy{\n            id\n            name\n          }\n          createdBy{\n            id\n            name\n            email\n          }\n        }\n      }\n    `;\n\n    this.apollo.mutate({\n      mutation: createTrend,\n      variables: {\n        title: valueInput.title,\n        description: valueInput.description,\n        status: STATUS.e,\n        images: this.linkImages,\n        videos: this.linkVideos,\n        catId1: parseInt(valueInput.catId1),\n        catId2: parseInt(valueInput.catId2),\n        source: valueInput.sources\n      }\n    }).subscribe( (data) => {\n      if(data){\n        this.notification.showSuccess('trendradar', 'trendradar.de');\n        this.router.navigateByUrl('listtrends');\n      } else {\n        this.notification.showError('error during adding', 'trendradar.de')\n      }\n\n    })\n  }\n\n  /**\n   * Handle Change of Images\n   */\n  onFileImagesChange(event:any) {\n    if (event.target.files && event.target.files[0]) {\n      //console.log(this.uploadFilesImages);\n      let filesAmount = event.target.files.length;\n      for (let i = 0; i < filesAmount; i++) {\n        let reader = new FileReader();\n\n        reader.onload = (event: any) => {\n          // console.log(event.target.result);\n          this.images.push(event.target.result);\n\n        };\n        // for upload image\n        this.uploadFilesImages.push(event.target.files[i]);\n        reader.readAsDataURL(event.target.files[i]);\n      }\n    }\n  }\n\n  /**\n   * Handle Change of Videos\n   */\n  onFileVideoChange(event:any) {\n    if (event.target.files && event.target.files[0]) {\n      let filesAmount = event.target.files.length;\n      for (let i = 0; i < filesAmount; i++) {\n        let reader = new FileReader();\n\n        reader.onload = (event: any) => {\n          // console.log(event.target.result);\n          this.videos.push(event.target.result);\n\n        };\n        // for upload video to frise base\n        this.uploadFilesVideos.push(event.target.files[i]);\n        reader.readAsDataURL(event.target.files[i]);\n      }\n    }\n  }\n\n  /**\n   * get Infor of all categories\n   */\n  getCategories() {\n    this.apollo\n    .watchQuery({\n      query: gql`\n        query getCategories($isparent: Int){\n          getCategories(isparent: $isparent){\n            id\n            title\n            description\n            createdAt\n            createdBy\n            {\n              id\n              name\n            }\n          }\n        }\n      `,\n      variables: {\n        isparent: 1\n      }\n    })\n    .valueChanges.subscribe(result => {\n\n      this.categories = Array.of(result.data);\n\n      this.categories = this.categories[0].getCategories;\n\n    });\n  }\n\n  /**\n   * get Infor of all categories\n   */\n  getCategoriesMegatrend() {\n    this.apollo\n    .watchQuery({\n      query: gql`\n        query getCategories($isparent: Int){\n          getCategories(isparent: $isparent){\n            id\n            title\n            description\n            createdAt\n            createdBy\n            {\n              id\n              name\n            }\n          }\n        }\n      `,\n      variables: {\n        isparent: 0\n      }\n    })\n    .valueChanges.subscribe(result => {\n\n      this.categoriesMegatrend = Array.of(result.data);\n\n      this.categoriesMegatrend = this.categoriesMegatrend[0].getCategories;\n\n    });\n  }\n\n  getMarcoTrendByMegaId($event: any){\n    let id:number = parseInt($event);\n    this.apollo\n    .watchQuery({\n      query: gql`\n        query getSubcategory($id: Int){\n          getSubcategory(id: $id){\n            id\n            title\n            description\n          }\n        }\n      `,\n      variables: {\n        parentId: id\n      }\n    })\n    .valueChanges.subscribe(result2 => {\n      console.log('when changing category')\n      console.log(Array.of(result2.data));\n      //this.categories = Array.of(this.categories[0].getSubcategory);\n    });\n  }\n\n  /**\n   * ******************************************************************************************************** FORM ARRAY\n   */\n\n  /**\n   * Video, Add and Remove question type Video\n   */\n  trend_videos() {\n    return this.form.get('trendVideos') as FormArray;\n  }\n\n  removeQuestionVideo(index: number) {\n    this.trend_videos().removeAt(index);\n  }\n\n  /**\n   * Image, Add and Remove question type image\n   * image would save on the google cloud\n   */\n  trend_images() {\n    return this.form.get('trendImages') as FormArray;\n  }\n\n  removeQuestionImage(index: number) {\n    this.trend_images().removeAt(index);\n  }\n\n  getSources(){\n    return this.form.get('sources') as FormArray;\n  }\n\n  addSources(){\n    return this.getSources().push(\n      this.fb.group({\n        title: new FormControl('', [Validators.required]),\n        description: new FormControl('', [Validators.required]),\n        url: new FormControl('', [Validators.required]),\n        source: new FormControl('', [Validators.required]),\n    }))\n  }\n\n  removeSources(index:number){\n    this.getSources().removeAt(index);\n  }\n\n  /**\n   * *********************************************************************************************************** END FORM ARRAY\n   */\n\n  /**\n   * Upload Image to Firebase Cloud in Folder ImagesSurvey\n   * @output string url\n   */\n  uploadImages(fileItem: any):any {\n    return new Promise((resolve, reject) => {\n      let URL:any;\n      const date = Date.now();\n      const filePath = `Masterthesis/${date}`; // where storaged\n      const fileRef = this.storage.ref(filePath); // where is the endpoint\n\n      const task = this.storage.upload(`Masterthesis/${date}`, fileItem);\n      task.snapshotChanges()\n        .pipe(\n          finalize(() => {\n            this.downloadURL = fileRef.getDownloadURL();\n            this.downloadURL.subscribe(url => {\n              if (url) {\n                URL = url;\n                resolve(URL);\n              }\n              console.log('Link image in function uploadImages  is :' + URL);\n            });\n          })\n        )\n        .subscribe();\n    });\n  }\n\n  /**\n   * Upload Video to Firebase Cloud in Folder VideosSurvey\n   * @output string url\n   */\n  uploadVideos(fileItem: any): any {\n    return new Promise((resolve, reject) => {\n      let URL: any;\n      const date = Date.now();\n      const filePath = `Masterthesis/${date}`; // where storaged\n      const fileRef = this.storage.ref(filePath); // where is the endpoint\n\n      const task = this.storage.upload(`Masterthesis/${date}`, fileItem);\n      task.snapshotChanges()\n        .pipe(\n          finalize(() => {\n            this.downloadURL = fileRef.getDownloadURL();\n            this.downloadURL.subscribe(url => {\n              if (url) {\n                URL = url;\n                resolve(URL);\n              }\n              console.log('Link video in function uploadImages  is :' + URL);\n            });\n          })\n        )\n        .subscribe();\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}