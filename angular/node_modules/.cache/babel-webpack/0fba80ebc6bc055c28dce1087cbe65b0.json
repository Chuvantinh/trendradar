{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport { User } from \"../models/user\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nimport * as i2 from \"./notification.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(apollo, notification, router) {\n    this.apollo = apollo;\n    this.notification = notification;\n    this.router = router;\n    this.tokenObj = '';\n  }\n\n  login(email, password) {\n    const LOGIN = gql`\n      mutation login($data: UserAuthPayload!) {\n        login(data: $data)\n      }\n    `;\n    const data = async;\n    this.apollo.mutate({\n      mutation: LOGIN,\n      variables: {\n        data: {\n          email: email,\n          password: password\n        }\n      }\n    }).subscribe(({\n      data\n    }) => {\n      this.notification.showSuccess('Login success', 'trendradar.com');\n      this.router.navigateByUrl('home'); // redirect to home\n\n      this.tokenObj = data;\n    }, error => {\n      this.notification.showError('Something gone wrong', 'trendradar.com');\n    });\n    return this.tokenObj; //let date: Date = new Date(\"2019-01-16\");\n  }\n\n  signUp(email, password) {\n    const REGISTER = gql`\n      mutation signupUser($data: UserCreateInput!) {\n        signupUser(data: $data){\n          id\n          name\n        }\n      }\n    `;\n    this.apollo.mutate({\n      mutation: REGISTER,\n      variables: {\n        data: {\n          email: email,\n          name: email,\n          password: password\n        }\n      }\n    }).subscribe(({\n      data\n    }) => {\n      console.log(data);\n      this.notification.showSuccess('Login success', 'trendradar.com');\n      this.router.navigateByUrl('home'); // redirect to home\n\n      return {\n        data\n      };\n    }, error => {\n      this.notification.showError('Something gone wrong', 'trendradar.com');\n    });\n  }\n\n  formatUser(email, token, localId, expriration) {\n    return new User(email, token, localId, expriration);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Apollo), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/vantinhchu/Documents/07_Projects/IntelliJ/trendradar/angular/src/app/services/auth.ts"],"names":[],"mappings":"AAEA,SAAgB,GAAhB,QAA0B,gBAA1B;AAEA,SAAQ,IAAR,QAAmB,gBAAnB;;;;;AAOA,OAAM,MAAO,WAAP,CAAkB;AAGtB,EAAA,WAAA,CACU,MADV,EAEU,YAFV,EAGU,MAHV,EAGwB;AAFd,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,MAAA,GAAA,MAAA;AALF,SAAA,QAAA,GAAgB,EAAhB;AAMH;;AACL,EAAA,KAAK,CAAC,KAAD,EAAgB,QAAhB,EAAgC;AAEnC,UAAM,KAAK,GAAG,GAAG;;;;AAIhB,KAJD;AAKA,UAAM,IAAI,GAAG,KAAb;AAAmB,SAAK,MAAL,CAAY,MAAZ,CAAmB;AACpC,MAAA,QAAQ,EAAE,KAD0B;AAEpC,MAAA,SAAS,EAAE;AACT,QAAA,IAAI,EAAE;AACJ,UAAA,KAAK,EAAE,KADH;AAEJ,UAAA,QAAQ,EAAE;AAFN;AADG;AAFyB,KAAnB,EAQhB,SARgB,CAQN,CAAC;AAAC,MAAA;AAAD,KAAD,KAAW;AACtB,WAAK,YAAL,CAAkB,WAAlB,CAA8B,eAA9B,EAA+C,gBAA/C;AACA,WAAK,MAAL,CAAY,aAAZ,CAA0B,MAA1B,EAFsB,CAEa;;AACnC,WAAK,QAAL,GAAgB,IAAhB;AACD,KAZkB,EAYf,KAAD,IAAU;AACX,WAAK,YAAL,CAAkB,SAAlB,CAA4B,sBAA5B,EAAoD,gBAApD;AACD,KAdkB;AAenB,WAAO,KAAK,QAAZ,CAtBmC,CAuBnC;AACD;;AAED,EAAA,MAAM,CAAC,KAAD,EAAgB,QAAhB,EAAgC;AACpC,UAAM,QAAQ,GAAG,GAAG;;;;;;;AAOnB,KAPD;AASA,SAAK,MAAL,CAAY,MAAZ,CAAmB;AACjB,MAAA,QAAQ,EAAE,QADO;AAEjB,MAAA,SAAS,EAAE;AACT,QAAA,IAAI,EAAE;AACJ,UAAA,KAAK,EAAE,KADH;AAEJ,UAAA,IAAI,EAAE,KAFF;AAGJ,UAAA,QAAQ,EAAE;AAHN;AADG;AAFM,KAAnB,EASG,SATH,CASa,CAAC;AAAC,MAAA;AAAD,KAAD,KAAW;AACtB,MAAA,OAAO,CAAC,GAAR,CAAY,IAAZ;AACA,WAAK,YAAL,CAAkB,WAAlB,CAA8B,eAA9B,EAA+C,gBAA/C;AACA,WAAK,MAAL,CAAY,aAAZ,CAA0B,MAA1B,EAHsB,CAGa;;AACnC,aAAO;AAAC,QAAA;AAAD,OAAP;AACD,KAdD,EAcI,KAAD,IAAU;AACX,WAAK,YAAL,CAAkB,SAAlB,CAA4B,sBAA5B,EAAoD,gBAApD;AACD,KAhBD;AAiBD;;AAED,EAAA,UAAU,CAAC,KAAD,EAAgB,KAAhB,EAA+B,OAA/B,EAAgD,WAAhD,EAAiE;AACzE,WAAO,IAAI,IAAJ,CAAS,KAAT,EAAe,KAAf,EAAsB,OAAtB,EAA+B,WAA/B,CAAP;AACD;;AAjEqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,MAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,mBAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,MAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { Injectable } from '@angular/core';\nimport {NotificationService} from \"./notification.service\";\nimport {Apollo, gql} from 'apollo-angular';\nimport {Router} from \"@angular/router\";\nimport {User} from \"../models/user\";\nimport { from, of } from 'rxjs';\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private tokenObj: any = '';\n\n  constructor(\n    private apollo: Apollo,\n    private notification: NotificationService,\n    private router: Router,\n  ) { }\n  login(email: string, password: string){\n\n    const LOGIN = gql`\n      mutation login($data: UserAuthPayload!) {\n        login(data: $data)\n      }\n    `;\n    const data = async this.apollo.mutate({\n      mutation: LOGIN,\n      variables: {\n        data: {\n          email: email,\n          password: password,\n        }\n      }\n    }).subscribe(({data}) => {\n      this.notification.showSuccess('Login success', 'trendradar.com');\n      this.router.navigateByUrl('home'); // redirect to home\n      this.tokenObj = data;\n    }, (error) => {\n      this.notification.showError('Something gone wrong', 'trendradar.com');\n    });\n    return this.tokenObj;\n    //let date: Date = new Date(\"2019-01-16\");\n  }\n\n  signUp(email: string, password: string): any{\n    const REGISTER = gql`\n      mutation signupUser($data: UserCreateInput!) {\n        signupUser(data: $data){\n          id\n          name\n        }\n      }\n    `;\n\n    this.apollo.mutate({\n      mutation: REGISTER,\n      variables: {\n        data: {\n          email: email,\n          name: email,\n          password: password,\n        }\n      }\n    }).subscribe(({data}) => {\n      console.log(data);\n      this.notification.showSuccess('Login success', 'trendradar.com');\n      this.router.navigateByUrl('home'); // redirect to home\n      return {data}\n    }, (error) => {\n      this.notification.showError('Something gone wrong', 'trendradar.com');\n    });\n  }\n\n  formatUser(email: string, token: string, localId: string, expriration: Date ): User{\n    return new User(email,token, localId, expriration);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}